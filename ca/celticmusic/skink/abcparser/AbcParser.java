/* Generated By:JavaCC: Do not edit this line. AbcParser.java */
package ca.celticmusic.skink.abcparser;

import java.io.*;
import ca.celticmusic.skink.*;


public class AbcParser implements AbcParserConstants {
   TuneBook theBook = new TuneBook();
   InputStreamReader inR = new InputStreamReader(System.in);
   BufferedReader bufIn = new BufferedReader(inR);
   Tuplet localTuplet = null; // kludge for lookahead

   public static void main(String args[])throws ParseException
      {
      Debug.init();
      if (args.length < 1)
         {
         System.err.println("usage: AbcParser <abcfile> [-debug]");
         System.exit(1);
         }

      String inFile = args[0];
      Debug.output(2,"Input file "+inFile);
      // open an input stream
      try {

         FileReader fr = new FileReader(inFile);

         //AbcParser parser = new AbcParser(System.in);
         AbcParser parser = new AbcParser(fr);
         Debug.output(2,"parsing...");
         parser.disable_tracing();
         if (args.length == 2)
              parser.enable_tracing();
         parser.AbcFile();
         parser.show();
         }
      catch (IOException e) {
         System.err.println(e);
         }
      }

   public TuneBook getTuneBook()
      {
      return theBook;
      }

   public void show()
      {
      theBook.listTunes();
      while(true)
         {
         try
            {
            doCommand();
            }
         catch(IOException e) {

            System.err.println(e);
            }
         }
      }

   public void doCommand() throws IOException
      {
      System.out.print("abc> ");
      String cmd = bufIn.readLine();
      if (cmd.equals("list"))
         {
         theBook.listTunes();
         }
      else if (cmd.equals("quit"))
              {
              System.exit(1);
              }
      else if (cmd.equals("dump"))
              {
              theBook.dumpTunes();
              }
           else
              {
              System.err.println("not understood");
              }
      }

  final public void AbcFile() throws ParseException {
    trace_call("AbcFile");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INDEX:
        case COMMENTLINE:
        case TEXTLINE:
        case EOL:
        case HIST_EOL:
        case AW_EOL:
        case KEY_EOL:
        case VOICE_EOL:
        case VOICE_TUNE_EOL:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INDEX:
          AbcTune();
          break;
        case COMMENTLINE:
          AbcComment();
          break;
        case TEXTLINE:
          AbcText();
          break;
        case EOL:
        case HIST_EOL:
        case AW_EOL:
        case KEY_EOL:
        case VOICE_EOL:
        case VOICE_TUNE_EOL:
          Eol();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
    } finally {
      trace_return("AbcFile");
    }
  }

  final public void AbcComment() throws ParseException {
    trace_call("AbcComment");
    try {
   Token comment;
      comment = jj_consume_token(COMMENTLINE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case HIST_EOL:
      case AW_EOL:
      case KEY_EOL:
      case VOICE_EOL:
      case VOICE_TUNE_EOL:
        Eol();
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Debug.output(2,"comment-->"+comment.image);
    } finally {
      trace_return("AbcComment");
    }
  }

  final public void AbcText() throws ParseException {
    trace_call("AbcText");
    try {
   FreeText theText = new FreeText();
      label_2:
      while (true) {
        TextLine(theText);
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
      }
    } finally {
      trace_return("AbcText");
    }
  }

  final public void TextLine(FreeText theText) throws ParseException {
    trace_call("TextLine");
    try {
   Token textLine = null;
      textLine = jj_consume_token(TEXTLINE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENTLINE:
        jj_consume_token(COMMENTLINE);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case HIST_EOL:
      case AW_EOL:
      case KEY_EOL:
      case VOICE_EOL:
      case VOICE_TUNE_EOL:
        Eol();
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Debug.output(2,"free text-->"+textLine.image);
    } finally {
      trace_return("TextLine");
    }
  }

  final public void Eol() throws ParseException {
    trace_call("Eol");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        jj_consume_token(EOL);
        break;
      case AW_EOL:
        jj_consume_token(AW_EOL);
        break;
      case KEY_EOL:
        jj_consume_token(KEY_EOL);
        break;
      case HIST_EOL:
        jj_consume_token(HIST_EOL);
        break;
      case VOICE_EOL:
        jj_consume_token(VOICE_EOL);
        break;
      case VOICE_TUNE_EOL:
        jj_consume_token(VOICE_TUNE_EOL);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Eol");
    }
  }

  final public void AbcTune() throws ParseException {
    trace_call("AbcTune");
    try {
   Tune theTune = new Tune();
   theBook.addTune(theTune);
      try {
        AbcHeader(theTune);
        AbcMusic(theTune);
      theBook.endTune();
      } catch (ParseException e) {
    Token t;
    Token lastTok = e.currentToken;
   /* Debug.output(1,"found parser error at line "+lastTok.next.beginLine+" col "+lastTok.next.beginColumn);
    
    e.printStackTrace();*/

    theTune.setErrorDetected(e);
    theBook.endTune();
    do {
       t= getNextToken();
       } while ((t.kind != ENDOFTUNE)  && (t.kind != EOF));
      }
    } finally {
      trace_return("AbcTune");
    }
  }

  final public void AbcHeader(Tune theTune) throws ParseException {
    trace_call("AbcHeader");
    try {
      String theIndex = null;
      String theKey   = null;
      theIndex = FieldNumber(theTune);
      Eol();
     theTune.setIndex(theIndex);
     theTune.addInfo(new InfoField("X",theIndex));
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
        case INFO:
        case TITLE:
        case NOTES:
        case ORIGIN:
        case RHYTHM:
        case SOURCE:
        case WORDS:
        case TRANSNOTES:
        case METERCHANGE:
        case VOICE_CHANGE:
        case TEMPOCHANGE:
        case LENGTHCHANGE:
        case PARTCHANGE:
        case LENGTH:
        case METER:
        case AREA:
        case BOOK:
        case COMPOSER:
        case DISC:
        case FILE:
        case GROUP:
        case HISTORY:
        case TEMPO:
        case PARTS:
        case ELEMSKIP:
        case VOICE:
        case TEXHEADER:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        OtherField(theTune);
        Eol();
      }
      theKey = FieldKey(theTune);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        jj_consume_token(COMMENT);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      Eol();
      theTune.addInfo(new InfoField("K",theKey));
    } finally {
      trace_return("AbcHeader");
    }
  }

  final public String FieldNumber(Tune theTune) throws ParseException {
    trace_call("FieldNumber");
    try {
   String index=null;
   Token iTok = null;
      iTok = jj_consume_token(INDEX);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      index = Digits();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        jj_consume_token(COMMENT);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
     theTune.setStart(iTok.beginLine,0);
     {if (true) return index;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FieldNumber");
    }
  }

  final public String Digits() throws ParseException {
    trace_call("Digits");
    try {
   Token theDigits = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
        theDigits = jj_consume_token(DIGITS);
        break;
      case HDIGITS:
        theDigits = jj_consume_token(HDIGITS);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return theDigits.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Digits");
    }
  }

  final public void TitleField(Tune theTune) throws ParseException {
    trace_call("TitleField");
    try {
      Token titleToken = null;
      InfoField titleField = null;
      titleToken = jj_consume_token(TITLE);
          titleField = new InfoField(titleToken.image);
          theTune.addInfo(titleField);
          theTune.setTitle(titleField.getInfoString());
    } finally {
      trace_return("TitleField");
    }
  }

  final public void OtherField(Tune theTune) throws ParseException {
    trace_call("OtherField");
    try {
           InfoField theField = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METERCHANGE:
      case TEMPOCHANGE:
      case LENGTHCHANGE:
      case PARTCHANGE:
      case LENGTH:
      case METER:
      case TEMPO:
      case PARTS:
        StructuredField(theTune);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          jj_consume_token(COMMENT);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
      case INFO:
      case NOTES:
      case ORIGIN:
      case RHYTHM:
      case SOURCE:
      case WORDS:
      case TRANSNOTES:
      case AREA:
      case BOOK:
      case COMPOSER:
      case DISC:
      case FILE:
      case GROUP:
      case ELEMSKIP:
      case TEXHEADER:
        theField = FreeTextField(theTune);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          jj_consume_token(COMMENT);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
                theTune.addInfo(theField);
        break;
      case HISTORY:
        HistoryField(theTune);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          jj_consume_token(COMMENT);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        break;
      case VOICE_CHANGE:
      case VOICE:
        VoiceField(theTune);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          jj_consume_token(COMMENT);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      case TITLE:
        TitleField(theTune);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          jj_consume_token(COMMENT);
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
      case COMMENT:
        jj_consume_token(COMMENT);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OtherField");
    }
  }

  final public void StructuredField(Tune theTune) throws ParseException {
    trace_call("StructuredField");
    try {
   InfoField theField = new InfoField();
   String m = null;
   String defLen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LENGTHCHANGE:
      case LENGTH:
        defLen = FieldDefaultLength();
                                     // note: does not handle L:3/2 (!) etc
        theTune.setDefaultNote(Integer.parseInt(defLen));
        theField.setCode("L");
        theField.setInfoString("1/"+defLen);
        break;
      case METERCHANGE:
      case METER:
        m = FieldMeter();
        theField.setCode("M");
        theField.setInfoString(m);
        theTune.setMeter(m);
        break;
      case TEMPOCHANGE:
      case TEMPO:
        m = FieldTempo(theTune);
        theField.setCode("Q");
        theField.setInfoString(m);
        break;
      case PARTCHANGE:
      case PARTS:
        FieldParts();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("StructuredField");
    }
  }

// token contains both the field id and the contents
  final public InfoField FreeTextField(Tune theTune) throws ParseException {
    trace_call("FreeTextField");
    try {
  Token fieldToken = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AREA:
        fieldToken = jj_consume_token(AREA);
        break;
      case BOOK:
        fieldToken = jj_consume_token(BOOK);
        break;
      case COMPOSER:
        fieldToken = jj_consume_token(COMPOSER);
        break;
      case DISC:
        fieldToken = jj_consume_token(DISC);
        break;
      case ELEMSKIP:
        fieldToken = jj_consume_token(ELEMSKIP);
        break;
      case FILE:
        fieldToken = jj_consume_token(FILE);
        break;
      case GROUP:
        fieldToken = jj_consume_token(GROUP);
        break;
      case INFO:
        fieldToken = jj_consume_token(INFO);
        break;
      case NOTES:
        fieldToken = jj_consume_token(NOTES);
        break;
      case ORIGIN:
        fieldToken = jj_consume_token(ORIGIN);
        break;
      case RHYTHM:
        fieldToken = jj_consume_token(RHYTHM);
        break;
      case SOURCE:
        fieldToken = jj_consume_token(SOURCE);
        break;
      case WORDS:
        fieldToken = jj_consume_token(WORDS);
        break;
      case TRANSNOTES:
        fieldToken = jj_consume_token(TRANSNOTES);
        break;
      case TEXHEADER:
        fieldToken = jj_consume_token(TEXHEADER);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return (new InfoField(fieldToken.image));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FreeTextField");
    }
  }

// not all fields are permitted inside a tune, to avoid ambiguity   
  final public InfoField InTuneFreeTextField(Tune theTune) throws ParseException {
    trace_call("InTuneFreeTextField");
    try {
   Token fieldToken = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INFO:
        fieldToken = jj_consume_token(INFO);
        break;
      case NOTES:
        fieldToken = jj_consume_token(NOTES);
        break;
      case ORIGIN:
        fieldToken = jj_consume_token(ORIGIN);
        break;
      case RHYTHM:
        fieldToken = jj_consume_token(RHYTHM);
        break;
      case SOURCE:
        fieldToken = jj_consume_token(SOURCE);
        break;
      case WORDS:
        fieldToken = jj_consume_token(WORDS);
        break;
      case TRANSNOTES:
        fieldToken = jj_consume_token(TRANSNOTES);
        break;
      case TEXHEADER:
        fieldToken = jj_consume_token(TEXHEADER);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return(new InfoField(fieldToken.image));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("InTuneFreeTextField");
    }
  }

  final public void VoiceField(Tune theTune) throws ParseException {
    trace_call("VoiceField");
    try {
   InfoField theField = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOICE:
        jj_consume_token(VOICE);
        break;
      case VOICE_CHANGE:
        jj_consume_token(VOICE_CHANGE);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      theField = FieldVoice(theTune);
         theTune.addInfo(theField);
    } finally {
      trace_return("VoiceField");
    }
  }

  final public InfoField FieldVoice(Tune theTune) throws ParseException {
    trace_call("FieldVoice");
    try {
   InfoField theField = null;
   String id = null;
   String voiceDef = null;
      id = VoiceId(theTune);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case KV_NONE:
        case CLEF_CLEF:
        case CLEF_TYPE:
        case CLEF_MIDDLE:
        case VOICE_NAME:
        case VOICE_SUBNAME:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_4;
        }
        VoiceDefinition(theTune,voiceDef);
      }
      theField = new InfoField("V",id+" "+voiceDef);
      {if (true) return theField;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FieldVoice");
    }
  }

  final public String VoiceId(Tune theTune) throws ParseException {
    trace_call("VoiceId");
    try {
   String voiceId;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOICE_ID:
        voiceId = jj_consume_token(VOICE_ID).image;
        break;
      case VOICE_DIGITS:
        voiceId = jj_consume_token(VOICE_DIGITS).image;
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       theTune.setVoice(voiceId);  // finds it if it exists, creates it if not
       {if (true) return voiceId;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("VoiceId");
    }
  }

// sets up the current voice   
  final public String VoiceDefinition(Tune theTune,String voiceDef) throws ParseException {
    trace_call("VoiceDefinition");
    try {
   String subDef = "";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KV_NONE:
      case CLEF_CLEF:
      case CLEF_TYPE:
      case CLEF_MIDDLE:
        subDef = ClefSpec(theTune);
        break;
      case VOICE_NAME:
        subDef = VoiceName(theTune);
        break;
      case VOICE_SUBNAME:
        subDef = VoiceSubName(theTune);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
         {if (true) return (voiceDef + " " + subDef);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("VoiceDefinition");
    }
  }

// define the voice name
  final public String VoiceName(Tune theTune) throws ParseException {
    trace_call("VoiceName");
    try {
   String theName;
      jj_consume_token(VOICE_NAME);
      jj_consume_token(KV_EQUALS);
      theName = VoiceQuotedString();
       theTune.setVoiceName(theName);
       {if (true) return("name=\u005c""+theName+"\u005c"");}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("VoiceName");
    }
  }

// define the voice subname
  final public String VoiceSubName(Tune theTune) throws ParseException {
    trace_call("VoiceSubName");
    try {
   String theSubName;
      jj_consume_token(VOICE_SUBNAME);
      jj_consume_token(KV_EQUALS);
      theSubName = VoiceQuotedString();
       theTune.setVoiceSubName(theSubName);
       {if (true) return("subname=\u005c""+theSubName+"\u005c"");}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("VoiceSubName");
    }
  }

  final public String VoiceQuotedString() throws ParseException {
    trace_call("VoiceQuotedString");
    try {
   String contents;
      contents = jj_consume_token(VOICE_QSTRING).image;
     {if (true) return contents.substring(1,(contents.length()-1));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("VoiceQuotedString");
    }
  }

// define the stem treatment//FIXME not yet implemented  

// define the transposition//FIXME not yet implemented  

// merge voices on a staff //FIXME not yet implemented   

// FIXME only preserving the first line of an H: field
  final public void HistoryField(Tune theTune) throws ParseException {
    trace_call("HistoryField");
    try {
   InfoField theField = new InfoField();
   String infoString = " ";
      jj_consume_token(HISTORY);
       theField.setCode("H");
       Debug.output(1,"History field started");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOREHIST:
      case RESTOFLINE:
        infoString = Text();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      label_5:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_5;
        }
        Eol();
        jj_consume_token(MOREHIST2);
      }
     theField.setInfoString(infoString);
     theTune.addInfo(theField);
    } finally {
      trace_return("HistoryField");
    }
  }

  final public String Text() throws ParseException {
    trace_call("Text");
    try {
   Token rol = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESTOFLINE:
        rol = jj_consume_token(RESTOFLINE);
        break;
      case MOREHIST:
        rol = jj_consume_token(MOREHIST);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return rol.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Text");
    }
  }

  final public String FieldDefaultLength() throws ParseException {
    trace_call("FieldDefaultLength");
    try {
   String denom;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LENGTH:
        jj_consume_token(LENGTH);
        break;
      case LENGTHCHANGE:
        jj_consume_token(LENGTHCHANGE);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      denom = NoteLengthStrict();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
       {if (true) return denom;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FieldDefaultLength");
    }
  }

  final public String NoteLengthStrict() throws ParseException {
    trace_call("NoteLengthStrict");
    try {
   String denom;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      Digits();
      jj_consume_token(SLASH);
      denom = Digits();
       {if (true) return denom;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NoteLengthStrict");
    }
  }

  final public String FieldMeter() throws ParseException {
    trace_call("FieldMeter");
    try {
   String theMeter;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METER:
        jj_consume_token(METER);
        break;
      case METERCHANGE:
        jj_consume_token(METERCHANGE);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      theMeter = Meter();
       {if (true) return theMeter;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FieldMeter");
    }
  }

  final public String Meter() throws ParseException {
    trace_call("Meter");
    try {
   Token rol = null;
      rol = RestOfLine();
      {if (true) return rol.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Meter");
    }
  }

  final public String FieldKey(Tune theTune) throws ParseException {
    trace_call("FieldKey");
    try {
   String theKey;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
        jj_consume_token(KEY);
        break;
      case KEYCHANGE:
        jj_consume_token(KEYCHANGE);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      theKey = Key(theTune);
      {if (true) return theKey;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FieldKey");
    }
  }

  final public String Key(Tune theTune) throws ParseException {
    trace_call("Key");
    try {
   String theKey  = null;
   String theClef = null;
      theKey = KeySpec(theTune);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KV_NONE:
      case CLEF_CLEF:
      case CLEF_TYPE:
      case CLEF_MIDDLE:
        theClef = ClefSpec(theTune);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      {if (true) return theKey + theClef;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Key");
    }
  }

  final public String KeySpec(Tune theTune) throws ParseException {
    trace_call("KeySpec");
    try {
   String theKey = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KV_NONE:
        theKey = jj_consume_token(KV_NONE).image;
        break;
      case KEY_HP1:
      case KEY_HP2:
        theKey = KeyHighlandPipes(theTune);
        break;
      case KEY_TONIC:
        theKey = KeyTonicMode(theTune);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       theTune.setKey(theKey);
       {if (true) return theKey;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("KeySpec");
    }
  }

  final public String KeyHighlandPipes(Tune theTune) throws ParseException {
    trace_call("KeyHighlandPipes");
    try {
   String theKey = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY_HP1:
        theKey = jj_consume_token(KEY_HP1).image;
        break;
      case KEY_HP2:
        theKey = jj_consume_token(KEY_HP2).image;
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       {if (true) return theKey;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("KeyHighlandPipes");
    }
  }

  final public String KeyTonicMode(Tune theTune) throws ParseException {
    trace_call("KeyTonicMode");
    try {
   String theTonic = "C";
   String theMode = "";
      theTonic = KeyTonic();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY_MODE:
        theMode = KeyMode();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
       {if (true) return theTonic + theMode;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("KeyTonicMode");
    }
  }

  final public String KeyTonic() throws ParseException {
    trace_call("KeyTonic");
    try {
   Token tok = null;
      tok = jj_consume_token(KEY_TONIC);
      {if (true) return tok.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("KeyTonic");
    }
  }

  final public String KeyMode() throws ParseException {
    trace_call("KeyMode");
    try {
   Token tok;
      tok = jj_consume_token(KEY_MODE);
       {if (true) return tok.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("KeyMode");
    }
  }

  final public String ClefSpec(Tune theTune) throws ParseException {
    trace_call("ClefSpec");
    try {
   String theClef = null;
      label_6:
      while (true) {
        theClef = ClefSubSpec(theTune,theClef);
        if (jj_2_3(2)) {
          ;
        } else {
          break label_6;
        }
      }
       {if (true) return theClef;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ClefSpec");
    }
  }

  final public String ClefSubSpec(Tune theTune, String theClef) throws ParseException {
    trace_call("ClefSubSpec");
    try {
   String subClef;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KV_NONE:
      case CLEF_CLEF:
      case CLEF_TYPE:
        subClef = Clef(theTune);
        break;
      case CLEF_MIDDLE:
        subClef = Middle(theTune);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       {if (true) return subClef;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ClefSubSpec");
    }
  }

  final public String Clef(Tune theTune) throws ParseException {
    trace_call("Clef");
    try {
   String theClef = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLEF_CLEF:
        ClefEquals();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      theClef = ClefType();
                theTune.setClef(theClef);
                {if (true) return " clef="+theClef;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Clef");
    }
  }

  final public void ClefEquals() throws ParseException {
    trace_call("ClefEquals");
    try {
      jj_consume_token(CLEF_CLEF);
      jj_consume_token(KV_EQUALS);
    } finally {
      trace_return("ClefEquals");
    }
  }

  final public String ClefType() throws ParseException {
    trace_call("ClefType");
    try {
   String theClef = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLEF_TYPE:
        theClef = jj_consume_token(CLEF_TYPE).image;
        break;
      case KV_NONE:
        theClef = jj_consume_token(KV_NONE).image;
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                {if (true) return theClef;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ClefType");
    }
  }

  final public String Middle(Tune theTune) throws ParseException {
    trace_call("Middle");
    try {
   String midNote = null;
      jj_consume_token(CLEF_MIDDLE);
      jj_consume_token(KV_EQUALS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOICE_ID:
        midNote = jj_consume_token(VOICE_ID).image;
        break;
      case KEY_TONIC:
        midNote = jj_consume_token(KEY_TONIC).image;
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       theTune.setMiddleNoteName(midNote);
       {if (true) return "middle="+midNote;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Middle");
    }
  }

  final public String FieldTempo(Tune theTune) throws ParseException {
    trace_call("FieldTempo");
    try {
   String theTempo;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEMPO:
        jj_consume_token(TEMPO);
        break;
      case TEMPOCHANGE:
        jj_consume_token(TEMPOCHANGE);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      theTempo = Tempo(theTune);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      {if (true) return theTempo;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FieldTempo");
    }
  }

  final public String Tempo(Tune theTune) throws ParseException {
    trace_call("Tempo");
    try {
   String beat = "";
   String tempoBpm;
      if (jj_2_4(2)) {
        beat = TempoBeat(theTune);
      } else {
        ;
      }
      tempoBpm = TempoBpm(theTune);
       {if (true) return (beat+tempoBpm);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Tempo");
    }
  }

  final public String TempoBeat(Tune theTune) throws ParseException {
    trace_call("TempoBeat");
    try {
  String num;
  String denom;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      num = Digits();
      jj_consume_token(SLASH);
      denom = Digits();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      jj_consume_token(EQUALS);
     theTune.setTempoBeat(num,denom);
     {if (true) return (num+"/"+denom+"=");}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TempoBeat");
    }
  }

  final public String TempoBpm(Tune theTune) throws ParseException {
    trace_call("TempoBpm");
    try {
   String bpm;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      bpm = Digits();
      theTune.setTempoBpm(bpm);
      {if (true) return bpm;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TempoBpm");
    }
  }

// FIXME should be able to use same production in tune body and header   
  final public String FieldTitle() throws ParseException {
    trace_call("FieldTitle");
    try {
   String theTitle = "";
   Token titleToken;
      titleToken = jj_consume_token(TITLE);
       {if (true) return titleToken.image.substring(2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FieldTitle");
    }
  }

  final public String TitleText() throws ParseException {
    trace_call("TitleText");
    try {
   Token titleToken = null;
      titleToken = RestOfLine();
      {if (true) return titleToken.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TitleText");
    }
  }

  final public void FieldWordsAligned(Tune theTune) throws ParseException {
    trace_call("FieldWordsAligned");
    try {
   AlignedWords aWords = new AlignedWords();
   Token tok = null;
      jj_consume_token(WORDS_ALIGNED);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AW_NEXTBAR:
        case AW_LITDASH:
        case AW_SYLBREAK:
        case AW_HOLDSYL:
        case AW_SKIP:
        case AW_JOIN:
        case AW_CONTINUE:
        case AW_TEXESCAPE:
        case AW_WSPACE:
        case AW_WORD:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AW_NEXTBAR:
          jj_consume_token(AW_NEXTBAR);
        aWords.nextBar();
          break;
        case AW_LITDASH:
          jj_consume_token(AW_LITDASH);
        aWords.litDash();
          break;
        case AW_SYLBREAK:
          jj_consume_token(AW_SYLBREAK);
        aWords.sylBreak();
          break;
        case AW_HOLDSYL:
          jj_consume_token(AW_HOLDSYL);
        aWords.holdSyl();
          break;
        case AW_SKIP:
          jj_consume_token(AW_SKIP);
        aWords.skip();
          break;
        case AW_JOIN:
          jj_consume_token(AW_JOIN);
        aWords.join();
          break;
        case AW_TEXESCAPE:
          jj_consume_token(AW_TEXESCAPE);
        aWords.escapedChar(tok.image);
          break;
        case AW_CONTINUE:
          jj_consume_token(AW_CONTINUE);
          break;
        case AW_WSPACE:
          jj_consume_token(AW_WSPACE);
        aWords.breakWord();
          break;
        case AW_WORD:
          tok = jj_consume_token(AW_WORD);
        aWords.word(tok.image);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      theTune.addAlignedWords(aWords);
    } finally {
      trace_return("FieldWordsAligned");
    }
  }

  final public String FieldParts() throws ParseException {
    trace_call("FieldParts");
    try {
   String theParts;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARTS:
        jj_consume_token(PARTS);
        break;
      case PARTCHANGE:
        jj_consume_token(PARTCHANGE);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESTOFLINE:
      case RESTOFFIELD:
        theParts = Parts();
      {if (true) return theParts;}
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      {if (true) return "";}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FieldParts");
    }
  }

  final public String Parts() throws ParseException {
    trace_call("Parts");
    try {
   Token rol = null;
      rol = RestOfLine();
      {if (true) return rol.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Parts");
    }
  }

// match rest of line in any lex state
  final public Token RestOfLine() throws ParseException {
    trace_call("RestOfLine");
    try {
   Token tok = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESTOFLINE:
        tok = jj_consume_token(RESTOFLINE);
        break;
      case RESTOFFIELD:
        tok = jj_consume_token(RESTOFFIELD);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return tok;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RestOfLine");
    }
  }

  final public void AbcMusic(Tune theTune) throws ParseException {
    trace_call("AbcMusic");
    try {
      AbcLine(theTune);
      label_8:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_8;
        }
        LineEnder(theTune);
        AbcLine(theTune);
      }
      EndOfTune();
    } finally {
      trace_return("AbcMusic");
    }
  }

  final public void AbcLine(Tune theTune) throws ParseException {
    trace_call("AbcLine");
    try {
      Line theLine = theTune.getNewLine();  // Tune will update the Line context
      InfoField theField = null;
      boolean resetLine = false;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TITLE:
      case KEYCHANGE:
      case METERCHANGE:
      case TEMPOCHANGE:
      case LENGTHCHANGE:
      case PARTCHANGE:
      case LENGTH:
      case KEY:
      case METER:
      case TEMPO:
      case PARTS:
        InTuneField(theTune,theLine);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          jj_consume_token(COMMENT);
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
       theTune.newLine(theLine);
        break;
      case VOICE_CHANGE:
      case VOICE:
        VoiceField(theTune);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          jj_consume_token(COMMENT);
          break;
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        break;
      case INFO:
      case NOTES:
      case ORIGIN:
      case RHYTHM:
      case SOURCE:
      case WORDS:
      case TRANSNOTES:
      case TEXHEADER:
        theField = InTuneFreeTextField(theTune);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          jj_consume_token(COMMENT);
          break;
        default:
          jj_la1[52] = jj_gen;
          ;
        }
       theLine.addElement(new FieldElement(theField));
       theTune.newLine(theLine);
        break;
      case WORDS_ALIGNED:
        label_9:
        while (true) {
          FieldWordsAligned(theTune);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMENT:
            jj_consume_token(COMMENT);
            break;
          default:
            jj_la1[53] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WORDS_ALIGNED:
            ;
            break;
          default:
            jj_la1[54] = jj_gen;
            break label_9;
          }
        }
        break;
      case COMMENT:
      case WHITESPACE:
      case EQUALS:
      case HINOTE:
      case LONOTE:
      case RESTNOTE:
      case OBRACE:
      case INVREST:
      case CARET2:
      case CARET:
      case UNDER2:
      case UNDER:
      case METERICHANGE:
      case KEYICHANGE:
      case VOICEICHANGE:
      case LENGTHICHANGE:
      case OBRACK:
      case OPAREN:
      case CPAREN:
      case OPLUS:
      case BARLINE:
      case REPEATSIGN:
      case NTHREPEAT:
      case QUOTEDSTRING:
      case BANGEDSTRING:
      case GRACING:
      case GT:
      case LT:
        label_10:
        while (true) {
          resetLine = Element(theTune,theLine);
           if (resetLine)
               {
               theTune.newLine(theLine);
               theLine = theTune.getNewLine();
               }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMENT:
          case WHITESPACE:
          case EQUALS:
          case HINOTE:
          case LONOTE:
          case RESTNOTE:
          case OBRACE:
          case INVREST:
          case CARET2:
          case CARET:
          case UNDER2:
          case UNDER:
          case METERICHANGE:
          case KEYICHANGE:
          case VOICEICHANGE:
          case LENGTHICHANGE:
          case OBRACK:
          case OPAREN:
          case CPAREN:
          case OPLUS:
          case BARLINE:
          case REPEATSIGN:
          case NTHREPEAT:
          case QUOTEDSTRING:
          case BANGEDSTRING:
          case GRACING:
          case GT:
          case LT:
            ;
            break;
          default:
            jj_la1[55] = jj_gen;
            break label_10;
          }
        }
        theTune.newLine(theLine);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("AbcLine");
    }
  }

  final public void InTuneField(Tune theTune,Line theLine) throws ParseException {
    trace_call("InTuneField");
    try {
   InfoField theField = new InfoField();
   String fieldContents = null;
   String fieldId = null;
   boolean advanceLine = false;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYCHANGE:
      case KEY:
        fieldContents = FieldKey(theTune);
               fieldId = "K";
        break;
      case METERCHANGE:
      case METER:
        fieldContents = FieldMeter();
               fieldId = "M";
               theTune.setMeter(fieldContents);
        break;
      case LENGTHCHANGE:
      case LENGTH:
        fieldContents = FieldDefaultLength();
               fieldId = "L";

               theTune.setDefaultNote(Integer.parseInt(fieldContents));
               fieldContents = "1/"+fieldContents;
        break;
      case TITLE:
        fieldContents = FieldTitle();
               fieldId = "T";
               advanceLine = true;
        break;
      case TEMPOCHANGE:
      case TEMPO:
        fieldContents = FieldTempo(theTune);
               fieldId = "Q";
        break;
      case PARTCHANGE:
      case PARTS:
        fieldContents = FieldParts();
               fieldId = "P";
               advanceLine = true; //FIXME probably should not cause advance

        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
             theField.setInfoString(fieldContents);
             theField.setCode(fieldId);
             // here, create a change element and add the field change to it
             theLine.addElement(new FieldElement(theField));
             // we don't advance line for in-tune changes, but we do for text
             if (!advanceLine)
                theLine.setNoAdvance();
    } finally {
      trace_return("InTuneField");
    }
  }

  final public void EndOfTune() throws ParseException {
    trace_call("EndOfTune");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDOFTUNE:
        jj_consume_token(ENDOFTUNE);
        break;
      case 0:
        jj_consume_token(0);
        break;
      case EOL:
      case HIST_EOL:
      case AW_EOL:
      case KEY_EOL:
      case VOICE_EOL:
      case VOICE_TUNE_EOL:
        Eol();
        jj_consume_token(0);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("EndOfTune");
    }
  }

  final public boolean Element(Tune theTune, Line theLine) throws ParseException {
    trace_call("Element");
    try {
      AbcElement theElement = null;
      boolean resetLine = false;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
      case EQUALS:
      case HINOTE:
      case LONOTE:
      case RESTNOTE:
      case INVREST:
      case CARET2:
      case CARET:
      case UNDER2:
      case UNDER:
      case METERICHANGE:
      case KEYICHANGE:
      case VOICEICHANGE:
      case LENGTHICHANGE:
      case OBRACK:
      case OPAREN:
      case CPAREN:
      case OPLUS:
      case BARLINE:
      case REPEATSIGN:
      case NTHREPEAT:
      case QUOTEDSTRING:
      case GRACING:
      case GT:
      case LT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
        case HINOTE:
        case LONOTE:
        case RESTNOTE:
        case INVREST:
        case CARET2:
        case CARET:
        case UNDER2:
        case UNDER:
        case OBRACK:
        case OPLUS:
        case GRACING:
        case GT:
        case LT:
          //LOOKAHEAD(2)
                      theElement = NoteElement(theLine);
          break;
        default:
          jj_la1[59] = jj_gen;
          if (jj_2_6(2)) {
            theElement = Tuplet(theLine);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BARLINE:
              theElement = BarLine();
              break;
            case REPEATSIGN:
              theElement = Repeat();
              break;
            case NTHREPEAT:
              theElement = NthRepeat();
              break;
            case OPAREN:
              theElement = BeginSlur();
              break;
            case CPAREN:
              theElement = EndSlur();
              break;
            case WHITESPACE:
              theElement = Space();
              break;
            case QUOTEDSTRING:
              theElement = GuitarChord(theLine);
              break;
            case METERICHANGE:
            case KEYICHANGE:
            case VOICEICHANGE:
            case LENGTHICHANGE:
              resetLine = InLineFields(theTune,theLine);
          if (!resetLine) theElement = new SpaceElement(); // force a beam break 

              break;
            default:
              jj_la1[60] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
            theLine.addElement(theElement);
        break;
      case BANGEDSTRING:
        Decoration(theLine);
        break;
      case OBRACE:
        GraceNotes(theLine);
        break;
      case COMMENT:
        jj_consume_token(COMMENT);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return resetLine;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Element");
    }
  }

  final public void LineEnder(Tune theTune) throws ParseException {
    trace_call("LineEnder");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case SPLAT:
      case BACKSLASH:
        LineEndTreatment(theTune);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          jj_consume_token(WHITESPACE);
          break;
        default:
          jj_la1[62] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      Eol();
    } finally {
      trace_return("LineEnder");
    }
  }

  final public void LineEndTreatment(Tune theTune) throws ParseException {
    trace_call("LineEndTreatment");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
        jj_consume_token(BANG);
        break;
      case BACKSLASH:
        jj_consume_token(BACKSLASH);
      if (theTune != null)
          theTune.setNoAdvance();
        break;
      case SPLAT:
        label_11:
        while (true) {
          jj_consume_token(SPLAT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPLAT:
            ;
            break;
          default:
            jj_la1[64] = jj_gen;
            break label_11;
          }
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("LineEndTreatment");
    }
  }

  final public AbcElement Tuplet(Line theLine) throws ParseException {
    trace_call("Tuplet");
    try {
   Tuplet theTuplet = new Tuplet();
      TupletSpec(theTuplet);
      label_12:
      while (true) {
        TupletContents(theTuplet,theLine);
        if (jj_2_7(1)) {
          ;
        } else {
          break label_12;
        }
      }
       {if (true) return theTuplet;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Tuplet");
    }
  }

  final public void TupletSpec(Tuplet theTuplet) throws ParseException {
    trace_call("TupletSpec");
    try {
   String notesNeeded = null;
      jj_consume_token(OPAREN);
      notesNeeded = Digits();
      theTuplet.setNumBeats(notesNeeded);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TUPLET_TERM:
      case TUPLET_TERM2:
        ComplexTupletTerm(theTuplet);
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
    } finally {
      trace_return("TupletSpec");
    }
  }

  final public void ComplexTupletTerm(Tuplet theTuplet) throws ParseException {
    trace_call("ComplexTupletTerm");
    try {
   Token tok = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TUPLET_TERM:
        tok = jj_consume_token(TUPLET_TERM);
                           // timeof
      theTuplet.setTimeOf(tok.image.substring(1));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TUPLET_TERM:
          tok = jj_consume_token(TUPLET_TERM);
      theTuplet.setNumNotes(tok.image.substring(1));
          break;
        default:
          jj_la1[67] = jj_gen;
          ;
        }
        break;
      case TUPLET_TERM2:
        tok = jj_consume_token(TUPLET_TERM2);
      theTuplet.setNumNotes(tok.image.substring(2));
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ComplexTupletTerm");
    }
  }

  final public void TupletContents(Tuplet theTuplet,Line theLine) throws ParseException {
    trace_call("TupletContents");
    try {
   AbcElement theElement=null;
   localTuplet = theTuplet;
      if (localTuplet.isNotFull()) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case HINOTE:
      case LONOTE:
      case RESTNOTE:
      case INVREST:
      case CARET2:
      case CARET:
      case UNDER2:
      case UNDER:
      case OBRACK:
      case OPLUS:
      case GRACING:
      case GT:
      case LT:
        theElement = NoteElement(theLine);
        break;
      case WHITESPACE:
      case OPAREN:
      case CPAREN:
      case QUOTEDSTRING:
      case BANGEDSTRING:
        theElement = MarkupElement(theLine);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if (theElement != null) { //FIXME KLUDGE because gracenotes and decos return null
        theTuplet.addElement(theElement);
                  }
    } finally {
      trace_return("TupletContents");
    }
  }

  final public AbcElement MarkupElement(Line theLine) throws ParseException {
    trace_call("MarkupElement");
    try {
   AbcElement theElement = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPAREN:
        theElement = BeginSlur();
        break;
      case CPAREN:
        theElement = EndSlur();
        break;
      case WHITESPACE:
        theElement = Space();
        break;
      case QUOTEDSTRING:
        theElement = GuitarChord(theLine);
        break;
      case BANGEDSTRING:
        theElement = Decoration(theLine);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MarkupElement");
    }
  }

  final public AbcElement BeginSlur() throws ParseException {
    trace_call("BeginSlur");
    try {
   AbcElement theElement =  new SlurBegin();
      jj_consume_token(OPAREN);
      {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BeginSlur");
    }
  }

  final public AbcElement EndSlur() throws ParseException {
    trace_call("EndSlur");
    try {
   AbcElement theElement =  new SlurEnd();
      jj_consume_token(CPAREN);
       {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("EndSlur");
    }
  }

  final public AbcElement NoteElement(Line theLine) throws ParseException {
    trace_call("NoteElement");
    try {
   AbcElement theElement=null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case HINOTE:
      case LONOTE:
      case RESTNOTE:
      case INVREST:
      case CARET2:
      case CARET:
      case UNDER2:
      case UNDER:
      case OBRACK:
      case OPLUS:
        theElement = DecoratedNote();
        break;
      case GT:
      case LT:
        theElement = BrokenRhythm(theLine);
        break;
      case GRACING:
        Gracings(theLine);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NoteElement");
    }
  }

  final public AbcElement DecoratedNote() throws ParseException {
    trace_call("DecoratedNote");
    try {
   AbcElement theElement=null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case HINOTE:
      case LONOTE:
      case RESTNOTE:
      case INVREST:
      case CARET2:
      case CARET:
      case UNDER2:
      case UNDER:
        theElement = Note();
        break;
      case OBRACK:
      case OPLUS:
        theElement = MultiNote();
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("DecoratedNote");
    }
  }

  final public AbcElement BrokenRhythm(Line theLine) throws ParseException {
    trace_call("BrokenRhythm");
    try {
   int dotCount = 0;
   BrokenRhythmElement broken = new BrokenRhythmElement();
      dotCount = BrokenSeparator();
            broken.setDotCount(dotCount);
            {if (true) return broken;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BrokenRhythm");
    }
  }

  final public int BrokenSeparator() throws ParseException {
    trace_call("BrokenSeparator");
    try {
    int dotCount = 0;
    Token sepTok = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        sepTok = jj_consume_token(GT);
             dotCount=sepTok.image.length();
        break;
      case LT:
        sepTok = jj_consume_token(LT);
             dotCount=-sepTok.image.length();
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
             {if (true) return dotCount;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BrokenSeparator");
    }
  }

  final public AbcElement MultiNote() throws ParseException {
    trace_call("MultiNote");
    try {
   MultiElement theMulti = new MultiElement();
   AbcElement theNote = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRACK:
        jj_consume_token(OBRACK);
        label_13:
        while (true) {
          theNote = DecoratedNote();
       theMulti.addElement(theNote);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQUALS:
          case HINOTE:
          case LONOTE:
          case RESTNOTE:
          case INVREST:
          case CARET2:
          case CARET:
          case UNDER2:
          case UNDER:
          case OBRACK:
          case OPLUS:
            ;
            break;
          default:
            jj_la1[74] = jj_gen;
            break label_13;
          }
        }
        jj_consume_token(CBRACK);
        break;
      case OPLUS:
        jj_consume_token(OPLUS);
        label_14:
        while (true) {
          theNote = DecoratedNote();
       theMulti.addElement(theNote);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQUALS:
          case HINOTE:
          case LONOTE:
          case RESTNOTE:
          case INVREST:
          case CARET2:
          case CARET:
          case UNDER2:
          case UNDER:
          case OBRACK:
          case OPLUS:
            ;
            break;
          default:
            jj_la1[75] = jj_gen;
            break label_14;
          }
        }
        jj_consume_token(CPLUS);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return theMulti;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MultiNote");
    }
  }

  final public AbcElement Note() throws ParseException {
    trace_call("Note");
    try {
   AbcElement theElement=null;
   MusicLength  theLength=null;
      theElement = NoteOrRest();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
      case DIGITS:
      case SLASHES:
      case HDIGITS:
        theLength = NoteLength();
         ((MusicElement)theElement).setLength(theLength);
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        Tie();
         ((MusicElement)theElement).setTied();
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
         {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Note");
    }
  }

  final public void Tie() throws ParseException {
    trace_call("Tie");
    try {
      jj_consume_token(MINUS);
    } finally {
      trace_return("Tie");
    }
  }

  final public void Gracings(Line theLine) throws ParseException {
    trace_call("Gracings");
    try {
   Token graceToken = null;
      graceToken = jj_consume_token(GRACING);
      theLine.addSimpleOrnament(graceToken.image);
    } finally {
      trace_return("Gracings");
    }
  }

//we return null because we don't want the gracenotes as a separate element
  final public AbcElement GraceNotes(Line theLine) throws ParseException {
    trace_call("GraceNotes");
    try {
   Grace theGrace = new Grace();
   AbcElement theNote = null;
   MusicLength theLength =null;
      jj_consume_token(OBRACE);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
        case HINOTE:
        case LONOTE:
        case CARET2:
        case CARET:
        case UNDER2:
        case UNDER:
          ;
          break;
        default:
          jj_la1[79] = jj_gen;
          break label_15;
        }
        theNote = Pitch();
      theGrace.addElement(theNote);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLASH:
        case DIGITS:
        case SLASHES:
        case HDIGITS:
          theLength = NoteLength();
       ((MusicElement)theNote).setLength(theLength);
          break;
        default:
          jj_la1[80] = jj_gen;
          ;
        }
      }
      jj_consume_token(CBRACE);
      if (theGrace.size() > 0){
         theLine.setGrace(theGrace);
         }
           {if (true) return null;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("GraceNotes");
    }
  }

  final public AbcElement GuitarChord(Line theLine) throws ParseException {
    trace_call("GuitarChord");
    try {
   Token theChord = null;
   GuitarChordElement theGC = new GuitarChordElement();
      theChord = jj_consume_token(QUOTEDSTRING);
       theGC.setChord(theChord.image);
       theLine.addGuitarChord(theGC);
       {if (true) return null;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("GuitarChord");
    }
  }

  final public AbcElement Decoration(Line theLine) throws ParseException {
    trace_call("Decoration");
    try {
   Token theDec = null;
   DecorationElement theDeco = new DecorationElement();
      theDec = jj_consume_token(BANGEDSTRING);
       theDeco.setDeco(theDec.image);
                 theLine.addDecoration(theDeco);
       {if (true) return null;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Decoration");
    }
  }

  final public AbcElement NoteOrRest() throws ParseException {
    trace_call("NoteOrRest");
    try {
   AbcElement theElement = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case HINOTE:
      case LONOTE:
      case CARET2:
      case CARET:
      case UNDER2:
      case UNDER:
        theElement = Pitch();
        break;
      case RESTNOTE:
        theElement = Rest();
        break;
      case INVREST:
        theElement = InvisibleRest();
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
         {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NoteOrRest");
    }
  }

  final public MusicElement Pitch() throws ParseException {
    trace_call("Pitch");
    try {
      MusicElement theElement = new MusicElement();
      String thePitch;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case CARET2:
      case CARET:
      case UNDER2:
      case UNDER:
        Accidental(theElement);
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      thePitch = BaseNote();
         theElement.setPitch(thePitch);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APOS:
      case COMMA:
        Octave(theElement);
        break;
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Pitch");
    }
  }

  final public void Accidental(MusicElement theElement) throws ParseException {
    trace_call("Accidental");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARET2:
        jj_consume_token(CARET2);
         theElement.doubleSharpen();
        break;
      case CARET:
        jj_consume_token(CARET);
         theElement.sharpen();
        break;
      case UNDER:
        jj_consume_token(UNDER);
         theElement.flatten();
        break;
      case UNDER2:
        jj_consume_token(UNDER2);
         theElement.doubleFlatten();
        break;
      case EQUALS:
        jj_consume_token(EQUALS);
         theElement.natural();
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Accidental");
    }
  }

  final public void Octave(MusicElement theElement) throws ParseException {
    trace_call("Octave");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APOS:
        label_16:
        while (true) {
          HiOctave(theElement);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case APOS:
            ;
            break;
          default:
            jj_la1[85] = jj_gen;
            break label_16;
          }
        }
        break;
      case COMMA:
        label_17:
        while (true) {
          LoOctave(theElement);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[86] = jj_gen;
            break label_17;
          }
        }
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Octave");
    }
  }

  final public void HiOctave(MusicElement theElement) throws ParseException {
    trace_call("HiOctave");
    try {
      jj_consume_token(APOS);
         theElement.upOctave();
    } finally {
      trace_return("HiOctave");
    }
  }

  final public void LoOctave(MusicElement theElement) throws ParseException {
    trace_call("LoOctave");
    try {
      jj_consume_token(COMMA);
         theElement.downOctave();
    } finally {
      trace_return("LoOctave");
    }
  }

  final public MusicLength NoteLength() throws ParseException {
    trace_call("NoteLength");
    try {
      MusicLength theLength = new MusicLength();
      String theNumerator = "1";
      String theDenominator = "1";
      Token t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASHES:
        t = jj_consume_token(SLASHES);
                         theDenominator="4";
        break;
      case DIGITS:
      case HDIGITS:
        theNumerator = Digits();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLASH:
          jj_consume_token(SLASH);
                           theDenominator = "2";
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DIGITS:
          case HDIGITS:
            theDenominator = Digits();
            break;
          default:
            jj_la1[88] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[89] = jj_gen;
          ;
        }
        break;
      case SLASH:
        jj_consume_token(SLASH);
                   theDenominator = "2";
                   Debug.output(2,"length has no numerator");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGITS:
        case HDIGITS:
          theDenominator = Digits();
          break;
        default:
          jj_la1[90] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            theLength.setNumerator(theNumerator);
            theLength.setDenominator(theDenominator);
            {if (true) return theLength;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NoteLength");
    }
  }

  final public String BaseNote() throws ParseException {
    trace_call("BaseNote");
    try {
   Token noteToken=null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HINOTE:
        noteToken = jj_consume_token(HINOTE);
        break;
      case LONOTE:
        noteToken = jj_consume_token(LONOTE);
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return noteToken.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BaseNote");
    }
  }

  final public AbcElement Rest() throws ParseException {
    trace_call("Rest");
    try {
   MusicElement theElement = new RestElement();
      jj_consume_token(RESTNOTE);
      {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Rest");
    }
  }

  final public AbcElement InvisibleRest() throws ParseException {
    trace_call("InvisibleRest");
    try {
   InvisibleRestElement theElement = new InvisibleRestElement();
   Token irToken = null;
      irToken = jj_consume_token(INVREST);
      theElement.setType(irToken.image);
      {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("InvisibleRest");
    }
  }

  final public AbcElement BarLine() throws ParseException {
    trace_call("BarLine");
    try {
   BarLineElement theElement = new BarLineElement();
   Token barLineToken = null;
      barLineToken = jj_consume_token(BARLINE);
      theElement.setSymbol(barLineToken.image);
      {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BarLine");
    }
  }

  final public AbcElement Repeat() throws ParseException {
    trace_call("Repeat");
    try {
   RepeatElement theElement = new RepeatElement();
   Token repeatToken = null;
      repeatToken = jj_consume_token(REPEATSIGN);
      theElement.setSymbol(repeatToken.image);
      theElement.setDirection();
      {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Repeat");
    }
  }

  final public AbcElement NthRepeat() throws ParseException {
    trace_call("NthRepeat");
    try {
   NthRepeatElement theElement = new NthRepeatElement();
   Token reptToken = null;
      reptToken = jj_consume_token(NTHREPEAT);
      Debug.output(2,"Nth repeat: token is "+reptToken.image);
      theElement.setSymbol(reptToken.image);
      theElement.setRepeatNumber();
      {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NthRepeat");
    }
  }

  final public AbcElement Space() throws ParseException {
    trace_call("Space");
    try {
   AbcElement theElement = new SpaceElement();
      jj_consume_token(WHITESPACE);
      {if (true) return theElement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Space");
    }
  }

  final public boolean InLineFields(Tune theTune, Line theLine) throws ParseException {
    trace_call("InLineFields");
    try {
   AbcElement theElement = null;
   boolean resetLine = false;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METERICHANGE:
        theElement = InLineMeter(theTune);
        break;
      case KEYICHANGE:
        theElement = InLineKey(theTune);
        break;
      case LENGTHICHANGE:
        theElement = InLineLength(theTune,theLine);
        break;
      case VOICEICHANGE:
        theElement = InLineVoice(theTune,theLine);
          resetLine = true;
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          theLine.addElement(theElement);
      {if (true) return resetLine;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("InLineFields");
    }
  }

  final public AbcElement InLineMeter(Tune theTune) throws ParseException {
    trace_call("InLineMeter");
    try {
   //FieldElement theMeter = null;
   MeterElement theMeter = null;
   String fieldContents;
      jj_consume_token(METERICHANGE);
      fieldContents = RestOfInlineField();
      jj_consume_token(ENDIFIELD);
      theMeter = new MeterElement(fieldContents);
      {if (true) return theMeter;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("InLineMeter");
    }
  }

  final public AbcElement InLineKey(Tune theTune) throws ParseException {
    trace_call("InLineKey");
    try {
    KeysigElement theKey = null;
    String fieldContents;
      jj_consume_token(KEYICHANGE);
      fieldContents = RestOfInlineField();
      jj_consume_token(ENDIFIELD);
        theKey = new KeysigElement(fieldContents);  //FIXME parser should handle keysig properly
                theTune.setKey(fieldContents);
        {if (true) return theKey;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("InLineKey");
    }
  }

  final public String RestOfInlineField() throws ParseException {
    trace_call("RestOfInlineField");
    try {
   Token rof =null;
      rof = jj_consume_token(RESTOFIFIELD);
     {if (true) return rof.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RestOfInlineField");
    }
  }

  final public AbcElement InLineLength(Tune theTune,Line theLine) throws ParseException {
    trace_call("InLineLength");
    try {
    LengthElement theLen = null;
    String denom;
    int d;
      jj_consume_token(LENGTHICHANGE);
      denom = NoteLengthStrict();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[94] = jj_gen;
        ;
      }
      jj_consume_token(CBRACK);
        d = Integer.parseInt(denom);
        theLen = new LengthElement(d); //OK if zero
        theTune.setDefaultDuration(theLen.getDefaultDuration());  // for next line
        theLine.setDefaultNoteDuration(theTune.getDefaultDuration());  // for current line
        {if (true) return theLen;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("InLineLength");
    }
  }

  final public AbcElement InLineVoice(Tune theTune, Line theLine) throws ParseException {
    trace_call("InLineVoice");
    try {
    InfoField theField;
      jj_consume_token(VOICEICHANGE);
      theField = FieldVoice(theTune);
      jj_consume_token(VOICE_END_INLINE);
       {if (true) return null ;}//new FieldElement(theField);

    throw new Error("Missing return statement in function");
    } finally {
      trace_return("InLineVoice");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_103() {
    if (!jj_rescan) trace_call("NthRepeat(LOOKING AHEAD...)");
    if (jj_scan_token(NTHREPEAT)) { if (!jj_rescan) trace_return("NthRepeat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("NthRepeat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_57() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (!jj_rescan) trace_call("NoteElement(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) { if (!jj_rescan) trace_return("NoteElement(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("NoteElement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_56() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (!jj_rescan) trace_call("Decoration(LOOKING AHEAD...)");
    if (jj_scan_token(BANGEDSTRING)) { if (!jj_rescan) trace_return("Decoration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Decoration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_55() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (!jj_rescan) trace_call("Repeat(LOOKING AHEAD...)");
    if (jj_scan_token(REPEATSIGN)) { if (!jj_rescan) trace_return("Repeat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Repeat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_72() {
    if (!jj_rescan) trace_call("FieldMeter(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) { if (!jj_rescan) trace_return("FieldMeter(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("FieldMeter(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_21() {
    if (!jj_rescan) trace_call("TempoBeat(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) jj_scanpos = xsp;
    if (jj_3R_29()) { if (!jj_rescan) trace_return("TempoBeat(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(SLASH)) { if (!jj_rescan) trace_return("TempoBeat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("TempoBeat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_84() {
    if (!jj_rescan) trace_call("EndSlur(LOOKING AHEAD...)");
    if (jj_scan_token(CPAREN)) { if (!jj_rescan) trace_return("EndSlur(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("EndSlur(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_54() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (!jj_rescan) trace_call("GuitarChord(LOOKING AHEAD...)");
    if (jj_scan_token(QUOTEDSTRING)) { if (!jj_rescan) trace_return("GuitarChord(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("GuitarChord(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_43() {
    if (!jj_rescan) trace_call("InTuneField(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) { if (!jj_rescan) trace_return("InTuneField(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("InTuneField(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_101() {
    if (!jj_rescan) trace_call("BarLine(LOOKING AHEAD...)");
    if (jj_scan_token(BARLINE)) { if (!jj_rescan) trace_return("BarLine(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("BarLine(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_83() {
    if (!jj_rescan) trace_call("BeginSlur(LOOKING AHEAD...)");
    if (jj_scan_token(OPAREN)) { if (!jj_rescan) trace_return("BeginSlur(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("BeginSlur(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_69() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(MOREHIST2)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (!jj_rescan) trace_call("FieldDefaultLength(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) { if (!jj_rescan) trace_return("FieldDefaultLength(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("FieldDefaultLength(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_75() {
    if (!jj_rescan) trace_call("FieldTempo(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) { if (!jj_rescan) trace_return("FieldTempo(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("FieldTempo(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_68() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (!jj_rescan) trace_call("InvisibleRest(LOOKING AHEAD...)");
    if (jj_scan_token(INVREST)) { if (!jj_rescan) trace_return("InvisibleRest(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("InvisibleRest(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_66() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (!jj_rescan) trace_call("MarkupElement(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) { if (!jj_rescan) trace_return("MarkupElement(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("MarkupElement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_47() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    return false;
  }

  private boolean jj_3R_41() {
    if (!jj_rescan) trace_call("Middle(LOOKING AHEAD...)");
    if (jj_scan_token(CLEF_MIDDLE)) { if (!jj_rescan) trace_return("Middle(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(KV_EQUALS)) { if (!jj_rescan) trace_return("Middle(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Middle(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_35() {
    Token xsp;
    if (jj_3R_47()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    if (jj_3R_46()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (!jj_rescan) trace_call("Rest(LOOKING AHEAD...)");
    if (jj_scan_token(RESTNOTE)) { if (!jj_rescan) trace_return("Rest(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Rest(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_97() {
    if (!jj_rescan) trace_call("GraceNotes(LOOKING AHEAD...)");
    if (jj_scan_token(OBRACE)) { if (!jj_rescan) trace_return("GraceNotes(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("GraceNotes(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_33() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (!jj_rescan) trace_call("TupletContents(LOOKING AHEAD...)");
    jj_lookingAhead = true;
    jj_semLA = localTuplet.isNotFull();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_37()) { if (!jj_rescan) trace_return("TupletContents(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) { if (!jj_rescan) trace_return("TupletContents(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("TupletContents(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_51() {
    if (!jj_rescan) trace_call("ClefType(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) { if (!jj_rescan) trace_return("ClefType(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("ClefType(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_32() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (!jj_rescan) trace_call("BaseNote(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) { if (!jj_rescan) trace_return("BaseNote(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("BaseNote(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_70() {
    if (!jj_rescan) trace_call("ClefEquals(LOOKING AHEAD...)");
    if (jj_scan_token(CLEF_CLEF)) { if (!jj_rescan) trace_return("ClefEquals(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(KV_EQUALS)) { if (!jj_rescan) trace_return("ClefEquals(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ClefEquals(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_31() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (!jj_rescan) trace_call("AbcLine(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) { if (!jj_rescan) trace_return("AbcLine(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("AbcLine(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_82() {
    if (!jj_rescan) trace_call("Gracings(LOOKING AHEAD...)");
    if (jj_scan_token(GRACING)) { if (!jj_rescan) trace_return("Gracings(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Gracings(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_50() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (!jj_rescan) trace_call("InLineVoice(LOOKING AHEAD...)");
    if (jj_scan_token(VOICEICHANGE)) { if (!jj_rescan) trace_return("InLineVoice(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("InLineVoice(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_40() {
    if (!jj_rescan) trace_call("Clef(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_3R_51()) { if (!jj_rescan) trace_return("Clef(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Clef(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_5() {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (!jj_rescan) trace_call("Digits(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) { if (!jj_rescan) trace_return("Digits(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("Digits(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_28() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (!jj_rescan) trace_call("TupletSpec(LOOKING AHEAD...)");
    if (jj_scan_token(OPAREN)) { if (!jj_rescan) trace_return("TupletSpec(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_29()) { if (!jj_rescan) trace_return("TupletSpec(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("TupletSpec(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_20() {
    if (!jj_rescan) trace_call("ClefSubSpec(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) { if (!jj_rescan) trace_return("ClefSubSpec(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("ClefSubSpec(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_118() {
    if (!jj_rescan) trace_call("InLineLength(LOOKING AHEAD...)");
    if (jj_scan_token(LENGTHICHANGE)) { if (!jj_rescan) trace_return("InLineLength(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("InLineLength(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_105() {
    if (!jj_rescan) trace_call("Note(LOOKING AHEAD...)");
    if (jj_3R_113()) { if (!jj_rescan) trace_return("Note(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Note(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_7() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (!jj_rescan) trace_call("Tuplet(LOOKING AHEAD...)");
    if (jj_3R_36()) { if (!jj_rescan) trace_return("Tuplet(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Tuplet(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_53() {
    Token xsp;
    if (jj_scan_token(64)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(BACKSLASH)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (!jj_rescan) trace_call("LineEndTreatment(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) { if (!jj_rescan) trace_return("LineEndTreatment(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("LineEndTreatment(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(OPLUS)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (!jj_rescan) trace_call("FieldParts(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) { if (!jj_rescan) trace_return("FieldParts(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("FieldParts(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_79() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (!jj_rescan) trace_call("InLineKey(LOOKING AHEAD...)");
    if (jj_scan_token(KEYICHANGE)) { if (!jj_rescan) trace_return("InLineKey(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("InLineKey(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_22() {
    if (!jj_rescan) trace_call("LineEnder(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_3R_19()) { if (!jj_rescan) trace_return("LineEnder(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("LineEnder(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(OBRACK)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (!jj_rescan) trace_call("MultiNote(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) { if (!jj_rescan) trace_return("MultiNote(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("MultiNote(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_116() {
    if (!jj_rescan) trace_call("InLineMeter(LOOKING AHEAD...)");
    if (jj_scan_token(METERICHANGE)) { if (!jj_rescan) trace_return("InLineMeter(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("InLineMeter(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_96() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(UNDER2)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(UNDER)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(CARET)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (!jj_rescan) trace_call("BrokenSeparator(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) { if (!jj_rescan) trace_return("BrokenSeparator(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("BrokenSeparator(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(CARET2)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (!jj_rescan) trace_call("Accidental(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) { if (!jj_rescan) trace_return("Accidental(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("Accidental(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (!jj_rescan) trace_call("Eol(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) { if (!jj_rescan) trace_return("Eol(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("Eol(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_61() {
    if (!jj_rescan) trace_call("Element(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) { if (!jj_rescan) trace_return("Element(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("Element(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_111() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (!jj_rescan) trace_call("FieldWordsAligned(LOOKING AHEAD...)");
    if (jj_scan_token(WORDS_ALIGNED)) { if (!jj_rescan) trace_return("FieldWordsAligned(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("FieldWordsAligned(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_104() {
    if (!jj_rescan) trace_call("InLineFields(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) { if (!jj_rescan) trace_return("InLineFields(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("InLineFields(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_81() {
    if (!jj_rescan) trace_call("BrokenRhythm(LOOKING AHEAD...)");
    if (jj_3R_100()) { if (!jj_rescan) trace_return("BrokenRhythm(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("BrokenRhythm(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_121() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (!jj_rescan) trace_call("VoiceField(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) { if (!jj_rescan) trace_return("VoiceField(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("VoiceField(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_18() {
    if (!jj_rescan) trace_call("TextLine(LOOKING AHEAD...)");
    if (jj_scan_token(TEXTLINE)) { if (!jj_rescan) trace_return("TextLine(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_scan_token(0)) { if (!jj_rescan) trace_return("TextLine(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("TextLine(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_126() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (!jj_rescan) trace_call("Pitch(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) jj_scanpos = xsp;
    if (jj_3R_127()) { if (!jj_rescan) trace_return("Pitch(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Pitch(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_85() {
    if (!jj_rescan) trace_call("Space(LOOKING AHEAD...)");
    if (jj_scan_token(WHITESPACE)) { if (!jj_rescan) trace_return("Space(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Space(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (!jj_rescan) trace_call("FieldTitle(LOOKING AHEAD...)");
    if (jj_scan_token(TITLE)) { if (!jj_rescan) trace_return("FieldTitle(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("FieldTitle(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_59() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (!jj_rescan) trace_call("FieldKey(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) { if (!jj_rescan) trace_return("FieldKey(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("FieldKey(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_80() {
    if (!jj_rescan) trace_call("DecoratedNote(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) { if (!jj_rescan) trace_return("DecoratedNote(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("DecoratedNote(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_45() {
    if (!jj_rescan) trace_call("InTuneFreeTextField(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) { if (!jj_rescan) trace_return("InTuneFreeTextField(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("InTuneFreeTextField(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_64() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (!jj_rescan) trace_call("NoteOrRest(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) { if (!jj_rescan) trace_return("NoteOrRest(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("NoteOrRest(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  /** Generated Token Manager. */
  public AbcParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[95];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x9c0,0x9c0,0x801,0x80,0x801,0x800,0x80000400,0x400,0x1000,0x1000,0x400,0x400000,0x400,0x400,0x400,0x400,0x400,0x80000400,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x400,0x400,0x0,0x7abb400,0x87abb400,0x0,0xa01,0x7a3a000,0x1000,0x7abb400,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x7a3b000,0x1000,0x7a3a000,0x7a3a000,0x0,0x7a3a000,0x7a3a000,0x0,0x20404000,0x40000,0x781a000,0x20404000,0x7a3a000,0x7802000,0x18000000,0x7802000,0x8000000,0x10000000,0x18000000,0x400000,0x4000,0x400000,0x20404000,0x18000,0x0,0x1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1637f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1637f,0x16100,0x7e,0x7e,0x200,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x100,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x7f149c00,0x7f17ffff,0x16181,0x0,0x2040000,0x3d109c00,0x7f149c00,0x0,0x80000000,0x0,0x80000000,0xc00000,0x400000,0xc00000,0x63140000,0x61100000,0x2040000,0x2040000,0x0,0x2040000,0x2040000,0x2040000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9c00,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x6000000,0x6000000,0x6000000,0x0,0x6000000,0x6000000,0x3ffe80,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x3ffe80,0x60280,0x28fc00,0x200000,0x100000,0x0,0x0,0x0,0x1000000,0x1000000,0x80,0x0,0x0,0x200,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0xf8000000,0xf8000000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c,0x36039c,0x60380,0x6000000,0x1c,0x0,0x1c,0x0,0x3,0x1,0x3,0x0,0x0,0x0,0x1c,0x0,0x1c,0x0,0x18,0x0,0x0,0x0,0x40,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x40,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x680000,0x680000,0x680000,0x0,0x680000,0x680000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1804d00,0x50000000,0x1804d00,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x4d00,0x58100,0x18000,0x20000,0x4d00,0x400,0x900,0x40040000,0x0,0x0,0x0,0x0,0x0,0x1f,0x1f,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x680000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AbcParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AbcParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AbcParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 95; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 95; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AbcParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AbcParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 95; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 95; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AbcParser(AbcParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 95; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AbcParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 95; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[131];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 95; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 131; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

   }
