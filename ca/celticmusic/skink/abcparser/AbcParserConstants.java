/* Generated By:JavaCC: Do not edit this line. AbcParserConstants.java */
package ca.celticmusic.skink.abcparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AbcParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DIGIT = 1;
  /** RegularExpression Id. */
  int COMMENT1 = 2;
  /** RegularExpression Id. */
  int TEXT = 3;
  /** RegularExpression Id. */
  int NONEMPTYTEXT = 4;
  /** RegularExpression Id. */
  int ENDOFLINE = 5;
  /** RegularExpression Id. */
  int INDEX = 6;
  /** RegularExpression Id. */
  int COMMENTLINE = 7;
  /** RegularExpression Id. */
  int TEXTLINE = 8;
  /** RegularExpression Id. */
  int ENDOFTUNE = 9;
  /** RegularExpression Id. */
  int COMMENT = 10;
  /** RegularExpression Id. */
  int EOL = 11;
  /** RegularExpression Id. */
  int WHITESPACE = 12;
  /** RegularExpression Id. */
  int EQUALS = 13;
  /** RegularExpression Id. */
  int SLASH = 14;
  /** RegularExpression Id. */
  int HINOTE = 15;
  /** RegularExpression Id. */
  int LONOTE = 16;
  /** RegularExpression Id. */
  int RESTNOTE = 17;
  /** RegularExpression Id. */
  int MINUS = 18;
  /** RegularExpression Id. */
  int OBRACE = 19;
  /** RegularExpression Id. */
  int CBRACE = 20;
  /** RegularExpression Id. */
  int INVREST = 21;
  /** RegularExpression Id. */
  int DIGITS = 22;
  /** RegularExpression Id. */
  int CARET2 = 23;
  /** RegularExpression Id. */
  int CARET = 24;
  /** RegularExpression Id. */
  int UNDER2 = 25;
  /** RegularExpression Id. */
  int UNDER = 26;
  /** RegularExpression Id. */
  int APOS = 27;
  /** RegularExpression Id. */
  int COMMA = 28;
  /** RegularExpression Id. */
  int SLASHES = 29;
  /** RegularExpression Id. */
  int CPLUS = 30;
  /** RegularExpression Id. */
  int INFO = 31;
  /** RegularExpression Id. */
  int TITLE = 32;
  /** RegularExpression Id. */
  int NOTES = 33;
  /** RegularExpression Id. */
  int ORIGIN = 34;
  /** RegularExpression Id. */
  int RHYTHM = 35;
  /** RegularExpression Id. */
  int SOURCE = 36;
  /** RegularExpression Id. */
  int WORDS = 37;
  /** RegularExpression Id. */
  int TRANSNOTES = 38;
  /** RegularExpression Id. */
  int KEYCHANGE = 39;
  /** RegularExpression Id. */
  int METERCHANGE = 40;
  /** RegularExpression Id. */
  int VOICE_CHANGE = 41;
  /** RegularExpression Id. */
  int METERICHANGE = 42;
  /** RegularExpression Id. */
  int KEYICHANGE = 43;
  /** RegularExpression Id. */
  int VOICEICHANGE = 44;
  /** RegularExpression Id. */
  int TEMPOCHANGE = 45;
  /** RegularExpression Id. */
  int LENGTHCHANGE = 46;
  /** RegularExpression Id. */
  int LENGTHICHANGE = 47;
  /** RegularExpression Id. */
  int PARTCHANGE = 48;
  /** RegularExpression Id. */
  int WORDS_ALIGNED = 49;
  /** RegularExpression Id. */
  int OBRACK = 50;
  /** RegularExpression Id. */
  int CBRACK = 51;
  /** RegularExpression Id. */
  int OPAREN = 52;
  /** RegularExpression Id. */
  int COLON = 53;
  /** RegularExpression Id. */
  int TUPLET_TERM = 54;
  /** RegularExpression Id. */
  int TUPLET_TERM2 = 55;
  /** RegularExpression Id. */
  int CPAREN = 56;
  /** RegularExpression Id. */
  int OPLUS = 57;
  /** RegularExpression Id. */
  int BARLINE = 58;
  /** RegularExpression Id. */
  int REPEATSIGN = 59;
  /** RegularExpression Id. */
  int NTHREPEAT = 60;
  /** RegularExpression Id. */
  int QUOTEDSTRING = 61;
  /** RegularExpression Id. */
  int BANGEDSTRING = 62;
  /** RegularExpression Id. */
  int BANG = 63;
  /** RegularExpression Id. */
  int SPLAT = 64;
  /** RegularExpression Id. */
  int BACKSLASH = 65;
  /** RegularExpression Id. */
  int GRACING = 66;
  /** RegularExpression Id. */
  int GT = 67;
  /** RegularExpression Id. */
  int LT = 68;
  /** RegularExpression Id. */
  int INVALID = 69;
  /** RegularExpression Id. */
  int HDIGITS = 70;
  /** RegularExpression Id. */
  int LENGTH = 71;
  /** RegularExpression Id. */
  int KEY = 72;
  /** RegularExpression Id. */
  int METER = 73;
  /** RegularExpression Id. */
  int AREA = 74;
  /** RegularExpression Id. */
  int BOOK = 75;
  /** RegularExpression Id. */
  int COMPOSER = 76;
  /** RegularExpression Id. */
  int DISC = 77;
  /** RegularExpression Id. */
  int FILE = 78;
  /** RegularExpression Id. */
  int GROUP = 79;
  /** RegularExpression Id. */
  int HISTORY = 80;
  /** RegularExpression Id. */
  int TEMPO = 81;
  /** RegularExpression Id. */
  int PARTS = 82;
  /** RegularExpression Id. */
  int ELEMSKIP = 83;
  /** RegularExpression Id. */
  int VOICE = 84;
  /** RegularExpression Id. */
  int TEXHEADER = 85;
  /** RegularExpression Id. */
  int EXTRAHEADER = 86;
  /** RegularExpression Id. */
  int MOREHIST2 = 87;
  /** RegularExpression Id. */
  int MOREHIST = 88;
  /** RegularExpression Id. */
  int HIST_EOL = 89;
  /** RegularExpression Id. */
  int AW_EOL = 90;
  /** RegularExpression Id. */
  int AW_NEXTBAR = 91;
  /** RegularExpression Id. */
  int AW_LITDASH = 92;
  /** RegularExpression Id. */
  int AW_SYLBREAK = 93;
  /** RegularExpression Id. */
  int AW_HOLDSYL = 94;
  /** RegularExpression Id. */
  int AW_SKIP = 95;
  /** RegularExpression Id. */
  int AW_JOIN = 96;
  /** RegularExpression Id. */
  int AW_CONTINUE = 97;
  /** RegularExpression Id. */
  int AW_TEXESCAPE = 98;
  /** RegularExpression Id. */
  int AW_WSPACE = 99;
  /** RegularExpression Id. */
  int AW_WORD = 100;
  /** RegularExpression Id. */
  int RESTOFLINE = 101;
  /** RegularExpression Id. */
  int KV_NONE = 104;
  /** RegularExpression Id. */
  int KV_EQUALS = 105;
  /** RegularExpression Id. */
  int CLEF_CLEF = 106;
  /** RegularExpression Id. */
  int CLEF_TYPE = 107;
  /** RegularExpression Id. */
  int CLEF_OCTAVA = 108;
  /** RegularExpression Id. */
  int CLEF_TRANSPOSE = 109;
  /** RegularExpression Id. */
  int CLEF_MIDDLE = 110;
  /** RegularExpression Id. */
  int KEY_HP1 = 111;
  /** RegularExpression Id. */
  int KEY_HP2 = 112;
  /** RegularExpression Id. */
  int KEY_MODE = 113;
  /** RegularExpression Id. */
  int KEY_TONIC = 114;
  /** RegularExpression Id. */
  int KEY_EOL = 115;
  /** RegularExpression Id. */
  int VOICE_END_INLINE = 116;
  /** RegularExpression Id. */
  int VOICE_EOL = 117;
  /** RegularExpression Id. */
  int VOICE_TUNE_EOL = 118;
  /** RegularExpression Id. */
  int VOICE_NAME = 119;
  /** RegularExpression Id. */
  int VOICE_SUBNAME = 120;
  /** RegularExpression Id. */
  int VOICE_STEMS = 121;
  /** RegularExpression Id. */
  int VOICE_STEM_DIRECTION = 122;
  /** RegularExpression Id. */
  int VOICE_MINUS = 123;
  /** RegularExpression Id. */
  int VOICE_DIGITS = 124;
  /** RegularExpression Id. */
  int VOICE_QSTRING = 125;
  /** RegularExpression Id. */
  int VOICE_ID = 126;
  /** RegularExpression Id. */
  int KV_INVALID = 127;
  /** RegularExpression Id. */
  int RESTOFFIELD = 128;
  /** RegularExpression Id. */
  int RESTOFIFIELD = 129;
  /** RegularExpression Id. */
  int ENDIFIELD = 130;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int TUNEBODY = 1;
  /** Lexical state. */
  int EATTEXT = 2;
  /** Lexical state. */
  int KEY_STATE = 3;
  /** Lexical state. */
  int EATLINE = 4;
  /** Lexical state. */
  int EATINLINE = 5;
  /** Lexical state. */
  int AW_PROCESS = 6;
  /** Lexical state. */
  int TUNEHEADER = 7;
  /** Lexical state. */
  int FIRSTHISTORY = 8;
  /** Lexical state. */
  int INHISTORY = 9;
  /** Lexical state. */
  int VOICE_STATE = 10;
  /** Lexical state. */
  int VOICE_TUNE_STATE = 11;
  /** Lexical state. */
  int VOICE_INLINE_STATE = 12;
  /** Lexical state. */
  int INPLUSCHORD = 13;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<DIGIT>",
    "<COMMENT1>",
    "<TEXT>",
    "<NONEMPTYTEXT>",
    "<ENDOFLINE>",
    "\"X:\"",
    "<COMMENTLINE>",
    "<TEXTLINE>",
    "<ENDOFTUNE>",
    "<COMMENT>",
    "<EOL>",
    "<WHITESPACE>",
    "\"=\"",
    "\"/\"",
    "<HINOTE>",
    "<LONOTE>",
    "\"z\"",
    "\"-\"",
    "\"{\"",
    "\"}\"",
    "<INVREST>",
    "<DIGITS>",
    "\"^^\"",
    "\"^\"",
    "\"__\"",
    "\"_\"",
    "\"\\\'\"",
    "\",\"",
    "\"//\"",
    "\"+\"",
    "<INFO>",
    "<TITLE>",
    "<NOTES>",
    "<ORIGIN>",
    "<RHYTHM>",
    "<SOURCE>",
    "<WORDS>",
    "<TRANSNOTES>",
    "\"K:\"",
    "\"M:\"",
    "\"V:\"",
    "\"[M:\"",
    "\"[K:\"",
    "\"[V:\"",
    "\"Q:\"",
    "\"L:\"",
    "\"[L:\"",
    "\"P:\"",
    "\"w:\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\":\"",
    "<TUPLET_TERM>",
    "<TUPLET_TERM2>",
    "\")\"",
    "\"+\"",
    "<BARLINE>",
    "<REPEATSIGN>",
    "<NTHREPEAT>",
    "<QUOTEDSTRING>",
    "<BANGEDSTRING>",
    "\"!\"",
    "\"*\"",
    "\"\\\\\"",
    "<GRACING>",
    "<GT>",
    "<LT>",
    "<INVALID>",
    "<HDIGITS>",
    "\"L:\"",
    "\"K:\"",
    "\"M:\"",
    "<AREA>",
    "<BOOK>",
    "<COMPOSER>",
    "<DISC>",
    "<FILE>",
    "<GROUP>",
    "\"H:\"",
    "\"Q:\"",
    "\"P:\"",
    "<ELEMSKIP>",
    "\"V:\"",
    "<TEXHEADER>",
    "<EXTRAHEADER>",
    "<MOREHIST2>",
    "<MOREHIST>",
    "<HIST_EOL>",
    "<AW_EOL>",
    "\"|\"",
    "\"\\\\-\"",
    "\"-\"",
    "\"_\"",
    "\"*\"",
    "\"~\"",
    "<AW_CONTINUE>",
    "\"\\\\\"",
    "<AW_WSPACE>",
    "<AW_WORD>",
    "<RESTOFLINE>",
    "\" \"",
    "\"\\t\"",
    "\"none\"",
    "\"=\"",
    "\"clef\"",
    "<CLEF_TYPE>",
    "<CLEF_OCTAVA>",
    "\"transpose\"",
    "\"middle\"",
    "\"HP\"",
    "\"Hp\"",
    "<KEY_MODE>",
    "<KEY_TONIC>",
    "<KEY_EOL>",
    "\"]\"",
    "<VOICE_EOL>",
    "<VOICE_TUNE_EOL>",
    "<VOICE_NAME>",
    "<VOICE_SUBNAME>",
    "\"stems\"",
    "<VOICE_STEM_DIRECTION>",
    "\"-\"",
    "<VOICE_DIGITS>",
    "<VOICE_QSTRING>",
    "<VOICE_ID>",
    "<KV_INVALID>",
    "<RESTOFFIELD>",
    "<RESTOFIFIELD>",
    "\"]\"",
  };

}
